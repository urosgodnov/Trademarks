visible(bgl2)<-FALSE
size(w) <- c(800, 400)
visible(w) <- TRUE
#adding handler for execute button
addHandlerChanged(execute_btn, handler=function(h,...) {
svalue(outputConsole)<-""
#checking if all requirements are met
if (svalue(what)=="only compare") {
if (length(svalue(filev))==0 || length(svalue(files))==0)
{
galert("Make sure validation and online files are selected!",parent=w)
} else {execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
} else if (length(svalue(filev))==0) {
galert("Make sure validation file is selected!", parent=w)
} else {
execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
})
# load libraries
packages=c("dplyr","XML","rvest","stringr","plyr","xml2","pryr","lubridate","readxl","xlsx",
"rowr","jpeg","png","RGtk2","RSelenium","gsubfn","magick","openssl","gWidgets2")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#loading sources
source("Auxillary.R")
source("Brandstock.R")
source("AUS_Scrapping.R")
source("US_Scrapping.R")
source("AR_Scrapping.R")
source("Main.R")
#python.load("PyhtonScrapDataURI.py")
## layout - one page with 2 boxes
w <- gwindow("Scraping and validating data", visible=FALSE)
pg <- ggroup(cont=w)
pg$set_borderwidth(10L)
lg <- gvbox(cont=pg)
rg <- gvbox(cont=pg, expand=TRUE, fill=TRUE)
## put main text widget and table widget into paned group so user can
## adjust allocated space - 2 windows
pg <- gpanedgroup(cont=rg, expand=TRUE, horizontal=FALSE)
fr <- gvbox(cont=pg, expand=TRUE, fill=TRUE, spacing=5)
l <- glabel(gettext("Messages:"), cont=fr, anchor=c(-1,0))
font(l) <- list(weight="bold")
#the style of a text in messages
outputConsole <- gtext("", wrap=FALSE,
font.attr=list(family="monospace"),
container=fr, expand=TRUE, fill=TRUE)
fr <- gvbox(cont=pg, expand=TRUE, fill=TRUE, spacing=5)
## buttons in a button group
bg <- ggroup(cont=rg)
addSpring(bg)
execute_btn <- gbutton("execute", cont=bg)
cancel_btn <- gbutton("cancel", cont=bg, handler=function(...) dispose(w))
## use a form layout for ease in laying out the controls to adjust the
## arguments for `read.table`
flyt <- gformlayout(cont=lg)
addSpring(lg)
# choose country
countries <- c("Australia"="Australia", "USA"="USA", "Argentina"="Argentina")
country <- gcombobox(names(countries), cont=flyt, label="Country")
# choose wheter only compare or also scrap and compare
what <- gradio(c("scrap and compare", "only compare"), horizontal=TRUE,
cont=flyt, label="Action",
handler=function(h,...){
if (svalue(what)=="only compare")
{
visible(bgl2)<-TRUE
} else {visible(bgl2)<-FALSE}
})
#validation file with new group, so user can hide button
bgl1 <- ggroup(cont=flyt)
filev<- gfilebrowse(text = "Select validation file", type = "open",
initial.dir = getwd(),
filter=list("Excel"=list(patterns=c("*.xls","*.xlsx"))),
container = bgl1,
handler=function(h,...){
cat(svalue(filev))
})
#source file with new group, so user can hide button
bgl2 <- ggroup(cont=flyt)
files<- gfilebrowse(text = "Select file with scraped data (County_online.xlsx)", type = "open",
initial.dir = getwd(),
filter=list("Excel"=list(patterns=c("*.xls","*.xlsx"))),
container = bgl2
)
#init
visible(bgl2)<-FALSE
size(w) <- c(800, 400)
visible(w) <- TRUE
#adding handler for execute button
addHandlerChanged(execute_btn, handler=function(h,...) {
svalue(outputConsole)<-""
#checking if all requirements are met
if (svalue(what)=="only compare") {
if (length(svalue(filev))==0 || length(svalue(files))==0)
{
galert("Make sure validation and online files are selected!",parent=w)
} else {execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
} else if (length(svalue(filev))==0) {
galert("Make sure validation file is selected!", parent=w)
} else {
execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
})
# load libraries
packages=c("dplyr","XML","rvest","stringr","plyr","xml2","pryr","lubridate","readxl","xlsx",
"rowr","jpeg","png","RGtk2","RSelenium","gsubfn","magick","openssl","gWidgets2")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#loading sources
source("Auxillary.R")
source("Brandstock.R")
source("AUS_Scrapping.R")
source("US_Scrapping.R")
source("AR_Scrapping.R")
source("Main.R")
#python.load("PyhtonScrapDataURI.py")
## layout - one page with 2 boxes
w <- gwindow("Scraping and validating data", visible=FALSE)
pg <- ggroup(cont=w)
pg$set_borderwidth(10L)
lg <- gvbox(cont=pg)
rg <- gvbox(cont=pg, expand=TRUE, fill=TRUE)
## put main text widget and table widget into paned group so user can
## adjust allocated space - 2 windows
pg <- gpanedgroup(cont=rg, expand=TRUE, horizontal=FALSE)
fr <- gvbox(cont=pg, expand=TRUE, fill=TRUE, spacing=5)
l <- glabel(gettext("Messages:"), cont=fr, anchor=c(-1,0))
font(l) <- list(weight="bold")
#the style of a text in messages
outputConsole <- gtext("", wrap=FALSE,
font.attr=list(family="monospace"),
container=fr, expand=TRUE, fill=TRUE)
fr <- gvbox(cont=pg, expand=TRUE, fill=TRUE, spacing=5)
## buttons in a button group
bg <- ggroup(cont=rg)
addSpring(bg)
execute_btn <- gbutton("execute", cont=bg)
cancel_btn <- gbutton("cancel", cont=bg, handler=function(...) dispose(w))
## use a form layout for ease in laying out the controls to adjust the
## arguments for `read.table`
flyt <- gformlayout(cont=lg)
addSpring(lg)
# choose country
countries <- c("Australia"="Australia", "USA"="USA", "Argentina"="Argentina")
country <- gcombobox(names(countries), cont=flyt, label="Country")
# choose wheter only compare or also scrap and compare
what <- gradio(c("scrap and compare", "only compare"), horizontal=TRUE,
cont=flyt, label="Action",
handler=function(h,...){
if (svalue(what)=="only compare")
{
visible(bgl2)<-TRUE
} else {visible(bgl2)<-FALSE}
})
#validation file with new group, so user can hide button
bgl1 <- ggroup(cont=flyt)
filev<- gfilebrowse(text = "Select validation file", type = "open",
initial.dir = getwd(),
filter=list("Excel"=list(patterns=c("*.xls","*.xlsx"))),
container = bgl1,
handler=function(h,...){
cat(svalue(filev))
})
#source file with new group, so user can hide button
bgl2 <- ggroup(cont=flyt)
files<- gfilebrowse(text = "Select file with scraped data (County_online.xlsx)", type = "open",
initial.dir = getwd(),
filter=list("Excel"=list(patterns=c("*.xls","*.xlsx"))),
container = bgl2
)
#init
visible(bgl2)<-FALSE
size(w) <- c(800, 400)
visible(w) <- TRUE
#adding handler for execute button
addHandlerChanged(execute_btn, handler=function(h,...) {
svalue(outputConsole)<-""
#checking if all requirements are met
if (svalue(what)=="only compare") {
if (length(svalue(filev))==0 || length(svalue(files))==0)
{
galert("Make sure validation and online files are selected!",parent=w)
} else {execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
} else if (length(svalue(filev))==0) {
galert("Make sure validation file is selected!", parent=w)
} else {
execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
})
# load libraries
packages=c("dplyr","XML","rvest","stringr","plyr","xml2","pryr","lubridate","readxl","xlsx",
"rowr","jpeg","png","RGtk2","RSelenium","gsubfn","magick","openssl","gWidgets2")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#loading sources
source("Auxillary.R")
source("Brandstock.R")
source("AUS_Scrapping.R")
source("US_Scrapping.R")
source("AR_Scrapping.R")
source("Main.R")
#python.load("PyhtonScrapDataURI.py")
## layout - one page with 2 boxes
w <- gwindow("Scraping and validating data", visible=FALSE)
pg <- ggroup(cont=w)
pg$set_borderwidth(10L)
lg <- gvbox(cont=pg)
rg <- gvbox(cont=pg, expand=TRUE, fill=TRUE)
## put main text widget and table widget into paned group so user can
## adjust allocated space - 2 windows
pg <- gpanedgroup(cont=rg, expand=TRUE, horizontal=FALSE)
fr <- gvbox(cont=pg, expand=TRUE, fill=TRUE, spacing=5)
l <- glabel(gettext("Messages:"), cont=fr, anchor=c(-1,0))
font(l) <- list(weight="bold")
#the style of a text in messages
outputConsole <- gtext("", wrap=FALSE,
font.attr=list(family="monospace"),
container=fr, expand=TRUE, fill=TRUE)
fr <- gvbox(cont=pg, expand=TRUE, fill=TRUE, spacing=5)
## buttons in a button group
bg <- ggroup(cont=rg)
addSpring(bg)
execute_btn <- gbutton("execute", cont=bg)
cancel_btn <- gbutton("cancel", cont=bg, handler=function(...) dispose(w))
## use a form layout for ease in laying out the controls to adjust the
## arguments for `read.table`
flyt <- gformlayout(cont=lg)
addSpring(lg)
# choose country
countries <- c("Australia"="Australia", "USA"="USA", "Argentina"="Argentina")
country <- gcombobox(names(countries), cont=flyt, label="Country")
# choose wheter only compare or also scrap and compare
what <- gradio(c("scrap and compare", "only compare"), horizontal=TRUE,
cont=flyt, label="Action",
handler=function(h,...){
if (svalue(what)=="only compare")
{
visible(bgl2)<-TRUE
} else {visible(bgl2)<-FALSE}
})
#validation file with new group, so user can hide button
bgl1 <- ggroup(cont=flyt)
filev<- gfilebrowse(text = "Select validation file", type = "open",
initial.dir = getwd(),
filter=list("Excel"=list(patterns=c("*.xls","*.xlsx"))),
container = bgl1,
handler=function(h,...){
cat(svalue(filev))
})
#source file with new group, so user can hide button
bgl2 <- ggroup(cont=flyt)
files<- gfilebrowse(text = "Select file with scraped data (County_online.xlsx)", type = "open",
initial.dir = getwd(),
filter=list("Excel"=list(patterns=c("*.xls","*.xlsx"))),
container = bgl2
)
#init
visible(bgl2)<-FALSE
size(w) <- c(800, 400)
visible(w) <- TRUE
#adding handler for execute button
addHandlerChanged(execute_btn, handler=function(h,...) {
svalue(outputConsole)<-""
#checking if all requirements are met
if (svalue(what)=="only compare") {
if (length(svalue(filev))==0 || length(svalue(files))==0)
{
galert("Make sure validation and online files are selected!",parent=w)
} else {execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
} else if (length(svalue(filev))==0) {
galert("Make sure validation file is selected!", parent=w)
} else {
execute(svalue(country),svalue(what),svalue(filev),svalue(files))}
})
AppNo <-3449457
#Making URL and Reading data
AppNo<-gsub(",","",AppNo)
AppNo<-gsub("/","",AppNo)
url <-
paste(
"https://portaltramites.inpi.gob.ar/Clasico/Docs/ResultadosConsultas/ResultadoSolicitudMarca2.asp?Va=",
AppNo,
sep = ""
)
data <- url %>% read_html(encoding="utf-8")
application <-data %>% html_node(xpath = "//tr//div[contains(.,'Presentaci')]")%>%
html_text()
application<-getDatePattern(application,".*Presentaci(.*?)Denominaci.*")
registrationNo<-data %>% html_node(xpath = "//strong[contains(.,'Resoluci')]/following::tr[1]//span[text()='Nro:']/following::span")%>%
html_text()
registrationNo<-try(as.numeric(registrationNo))
if (length(registrationNo)==0) {
registrationNo<-NA
}
renewal<-try(as.Date(data %>% html_nodes(xpath = "//tr/td[text()='Vence:']/following::td[1]")%>%
html_text(),"%d/%m/%Y"))
renewal<-format(renewal, "%d.%m.%Y")
if (length(renewal)==0 || is.na(renewal)) {
renewal<-format(as.Date("1800-01-01","%Y-%m-%d"),"%d.%m.%Y")
}
TMName<-data %>% html_node(xpath = "//tr//div[contains(.,'Presentaci')]")%>%
html_text()
TMName<-getNamesPattern(TMName,".*Denominación:(.*?)Tipo.*")
acceptance<-try(as.Date(data %>% html_node(xpath = "//strong[contains(.,'Resoluci')]/following::tr[1]//span[contains(.,'Fec  de Proy')]/following::span")%>%
html_text(),"%d/%m/%Y"))
acceptance<-format(acceptance, "%d.%m.%Y")
if (length(acceptance)==0 || is.na(acceptance)) {
acceptance<-format(as.Date("1800-01-01","%Y-%m-%d"),"%d.%m.%Y")
}
#Priority date
priority <-
as.Date(
data %>% html_node(xpath = "//strong[contains(.,'Prioridades')]/following::tr[1]//span[text()='Fecha:']/following::td")%>%
html_text(),
"%d/%m/%Y"
)
priority<-format(priority, "%d.%m.%Y")
if (length(priority)==0 || is.na(priority)) {
priority<-format(as.Date("1800-01-01","%Y-%m-%d"),"%d.%m.%Y")
}
priorityNo<-gsub(" ","",data %>% html_node(xpath = "//strong[contains(.,'Prioridades')]/following::tr[1]//span[text()='Prioridad: ']/following::td")%>%
html_text())
if (length(priorityNo)==0) {
priorityNo<-NA
}
priorityCountry<-gsub(" ","",  data %>% html_node(xpath = "//strong[contains(.,'Prioridades')]/following::tr[1]//div[contains(.,'Pais:')]/following::td")%>%
html_text())
if (length(priorityCountry)==0) {
priorityCountry<-NA
}
#PublicationDate
publication <-data %>% html_node(xpath = "//span[contains(.,'PUBLICACI')]/following::tr[1]")%>%
html_text()
publication<-getDatePattern(publication,".*Fecha(.*?)Numero.*")
publicationNo<-data %>% html_nodes(xpath = "//span[contains(.,'PUBLICACI')]/following::tr[1]/td[contains(@class,'titulorojo')]//a")%>%
html_text()
publicationNo<-gsub('([0-9]+).*','\\1',publicationNo)
if (length(publicationNo)==0) {
publicationNo<-NA
}
owner<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Datos de titulares')]/following::tr[1]//p[text()='Nombre']/following::td[1]")
%>% html_text())
if (length(owner)==0) {
owner<-NA
}
owner<-paste(owner, collapse=" | ")
ownerAddr<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Datos de titulares')]/following::tr[1]//td[text()='Domicilio Real']/following::span[1]")
%>% html_text())
ownerAddr<-str_trim(ownerAddr)
OwnerCountry<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Datos de titulares')]/following::tr[1]//td[text()='Territorio Leg.']/following::td[1]")
%>% html_text())
OwnerCountry<-str_trim(OwnerCountry)
ownerAddr<-paste(ownerAddr,OwnerCountry,sep=" ")
ownerAddr<-str_trim(gsub("-","",ownerAddr))
if (length(ownerAddr)==0) {
ownerAddr<-NA
}
ownerAddr<-paste(ownerAddr,collapse=" | ")
agentOnRecord1<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Gestion')]/following::tr[1]//td[text()='Agente:']/following::td[1]")
%>% html_text())
agentOnRecord1<-str_trim(gsub('[[:digit:]]+', '', agentOnRecord1))
agentOnRecord2<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Gestion')]/following::tr[1]//span[text()='Caracter:']/following::td[1]")
%>% html_text())
if (nchar(agentOnRecord2)>3) {
agentOnRecord<-paste(agentOnRecord1," (",agentOnRecord2,")",sep="")
} else {agentOnRecord<-agentOnRecord1}
if (length(agentOnRecord)==0) {
agentOnRecord<-NA
}
AgentOnRecordAddr<-data %>% html_node(xpath = "//tr//div[contains(.,'Presentaci')]")%>%
html_text()
AgentOnRecordAddr<-str_trim(getNamesPattern(AgentOnRecordAddr,".*Domicilo legal:(.*?)Renov. de*"))
if (length(AgentOnRecordAddr)==0) {
AgentOnRecordAddr<-NA
}
agentOnRecord<-paste(agentOnRecord,AgentOnRecordAddr,sep="\n ")
#NA
associatedTMs<-NA
###Dealing with images
imageUrl<-data %>% html_node(xpath = "//tr//td[@class='titulorojo']/a")%>%
html_attr("href")
if (length(imageUrl) == 1 && !is.na(imageUrl)) {
cat(paste("\n","Downloading image...",sep=""))
img <- imageUrl%>%read_html()%>%html_nodes("img")
img_src <- html_attr(img, "src")
img_src <- gsub("^data.*base64,", "", img_src)
imageJPG<-try(image_read(base64_decode(img_src)), silent=TRUE)
if (class(imageJPG)!="try-error") {
image_write(imageJPG,path=paste("./logos/",AppNo,".jpg",sep=""))
}
#python.call("decodeImgData", imageUrl,as.character(AppNo))
} else {imageUrl<-NA}
#####Classes
tmpDF <- data.frame(matrix(ncol = 18, nrow = 1))
class <-
sapply(as.list(1:9), function(x) {
return(paste("class", x, sep = ""))
})
desc <-
sapply(as.list(1:9), function(x) {
return(paste("description", x, sep = ""))
})
colnames(tmpDF) <- c(class, desc)
classNo<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Datos de titulares')]/following::tr[1]//td[contains(.,'Clase')]")
%>% html_text())
classNo<-getNamesPattern(classNo,".*Clase(.*?)Proteccion.*")
classDes<-gsub("\r\n","",data %>% html_nodes(xpath = "//strong[contains(.,'Datos de titulares')]/following::tr[1]//td[contains(.,'Clase')]")
%>% html_text())
classDes<-getNamesPattern(classDes,".*Proteccion.(.*?)Limitacion*")
tmpDF$class1<-classNo
tmpDF$description1<-classDes
LimDis<-gsub("\r\n","",data %>% html_node(xpath = "//strong[contains(.,'Datos de titulares')]/following::tr[1]//td[contains(.,'Limitacion:')]/following::td[1]")
%>% html_text())
if  (length(LimDis)==0){
LimDis<-NA }
LimDis<-str_trim(gsub("-","",LimDis))
words<-NA
image<-NA
status<-data %>% html_node(xpath = "//strong[contains(.,'Resoluci')]/following::tr[1]//strong[text()='Tipo:']/following::span")%>%
html_text()
kind<-data %>% html_node(xpath = "//tr//div[contains(.,'Direccion de Marcas')]/following::tr[2]//td[span/text()='Tipo Marca :']")%>%
html_text()
kind<-str_trim(gsub("Tipo Marca :","",kind))
#return DF
tmpDF <- cbind(
data.frame(
AppNo,
# TMName,
registrationNo,
renewal,
application,
acceptance,
priority,
priorityNo,
priorityCountry,
publication,
publicationNo,
agentOnRecord,
associatedTMs,
status,
kind,
words,
image,
imageUrl,
LimDis,
owner,
ownerAddr,
stringsAsFactors = FALSE
),
tmpDF
)
tmpDF<-tmpDF%>%dplyr::rename(
`Application no.`=AppNo,
# Trademark=TMName,
`Application date`=application,
`Registration no.`=registrationNo,
`Registration date`=acceptance,
`Next renewal date`=renewal,
`Priority date`=priority,
`Priority no.`=priorityNo,
`Priority country`=priorityCountry,
`Publication date`=publication,
`Publication no.`=publicationNo,
`TM Type`=kind,
Status=status,
`Limitations & Disclaimers`=LimDis,
`Agent on record`=agentOnRecord,
Owner=owner,
`Owner address`=ownerAddr,
`Associated TMs`=associatedTMs,
`1st Class`=   class1,
`1st Goods & Services` =description1,
`2nd Class` = class2,
`2nd Goods & Services`=description2,
`3rd Class` =class3,
`3rd Goods & Services`=description3,
`4th Class`  =class4,
`4th Goods & Services`=description4,
`5th Class`   =class5,
`5th Goods & Services`=description5,
`6th Class`   =class6,
`6th Goods & Services`=description6,
`7th Class`  =class7,
`7th Goods & Services`=description7,
`8th Class`  =class8,
`8th Goods & Services`=description8,
`9th Class`  =class9,
`9th Goods & Services`=description9
)
#
renewal
tmpDF
application
registrationNo
priorityCountry
priorityNo
priority
associatedTMs
ownerAddr
classNo
classDes
classDes
