{
    "collab_server" : "",
    "contents" : "createExcel<- function(allData,Country,startRow=3,startColumn=1) {\n  \n  insert(outputConsole,\"Started creating excel...\")\n  \n  errors<-allData[allData$Eval==0,-ncol(allData)]\n  errors<-errors%>%arrange(Record_ID,sourceType)\n  allData<-allData[allData$Eval==1,-ncol(allData)]\n  allData$`Application no.`<-as.integer(allData$`Application no.`)\n  allData<-allData%>%arrange(Record_ID,sourceType)\n  #selecting cells which will be formated differently\n  mdata<-as.matrix(allData)\n  \n  nrow<-nrow(mdata)/3\n  ncol<-ncol(mdata)\n  \n  highlight <- \"test\"\n  \n  for (i in 4:ncol) {\n    \n    for (j in 1:nrow) {\n      \n      value1<-ifelse(is.na(mdata[3*j-1,i]),\"\",mdata[3*j-1,i])\n      value2<-ifelse(is.na(mdata[3*j,i]),\"\",mdata[3*j,i])\n      \n      \n      if (tolower(value1)!=tolower(value2))\n      {\n        #cells actually begin at 4\n        highlight<-c(highlight,paste(3*j+3,\".\",i,sep=\"\"))\n      }\n      \n    }\n  }\n  highlight<-highlight[-1]\n  \n  #creating xlsx report\n  wb<-createWorkbook(type=\"xlsx\")\n  \n  \n  TABLE_COLNAMES_STYLE <- CellStyle(wb) + Font(wb, isBold=TRUE) +\n    Alignment(wrapText=TRUE, horizontal=\"ALIGN_CENTER\") +\n    Border(color=\"black\", position=c(\"TOP\", \"BOTTOM\"), \n           pen=c(\"BORDER_THIN\", \"BORDER_THICK\"))   \n  \n  \n  sheet <- createSheet(wb, sheetName = \"Verification\")\n  \n  addDataFrame(allData, sheet, startRow=startRow, startColumn=startColumn,row.names=FALSE,\n               colnamesStyle = TABLE_COLNAMES_STYLE)\n  \n  #Applying highlightin where differences\n  \n  cols <- ncol(allData)\n  rows <- getRows(sheet, \n                  rowIndex=(startRow+1):(startRow+nrow(allData)))    # get rows\n  cells <- getCells(rows, colIndex = 1:cols)    # get cells\n  # change start column if loadings do not start in second column of excel\n  values <- lapply(cells, getCellValue)             # extract the values\n  \n  fo <- Fill(foregroundColor=\"green\")                  # create fill object\n  cs <- CellStyle(wb, fill=fo) \n  # apply style to cells that meet criteria\n  lapply(names(cells[highlight]),\n         function(ii)setCellStyle(cells[[ii]],cs))\n  \n  \n  #Merge rows\n  for (i in 1:(nrow(allData)/3)) {\n    addMergedRegion(sheet, startRow=startRow+3*i-2, endRow=startRow+3*i, startColumn=startColumn, endColumn=startColumn)\n    \n  }\n  \n  #Checking ending of first data frame\n  end<-nrow(allData)\n  \n  #adding another data frame to sheet if any!\n  if (nrow(errors)>0) {\n  addDataFrame(errors, sheet, startRow=startRow+end+1, startColumn=startColumn,row.names=FALSE,\n               col.names = FALSE)\n  \n  cols <- ncol(errors)\n  rows <- getRows(sheet, \n                  rowIndex=(startRow+nrow(allData)+1):(startRow+nrow(allData)+1+nrow(errors)))    # get rows\n  cells <- getCells(rows, colIndex = 1:cols)    # get cells\n  # change start column if loadings do not start in second column of excel\n  values <- lapply(cells, getCellValue)             # extract the values\n  \n  fo <- Fill(foregroundColor=\"red\")                  # create fill object\n  cs <- CellStyle(wb, fill=fo) \n  # apply style to cells that meet criteria\n  lapply(names(cells),\n         function(ii)setCellStyle(cells[[ii]],cs))\n  \n  \n  #Merge rows\n  for (i in 1:(nrow(errors)/2)) {\n    addMergedRegion(sheet, startRow=startRow+end+2*i-1, endRow=startRow+end+2*i, startColumn=startColumn, endColumn=startColumn)\n    \n  }\n  \n  }\n  \n  #here i put app no. Watch what is unique\n  RegNumList<-as.list(unique(gsub(\"\\\\.\",\"\",allData$`Application no.`)))\n  #Adding logos\n  for (i in 1:length(RegNumList)) {\n    \n    \n    #Read registration number\n    RegNum<-RegNumList[[i]]\n    \n    imagFile<-paste(\"./logos/\",RegNum,\".jpg\",sep=\"\")\n    if(file.exists(imagFile)) {\n    \n      img <- try(readJPEG(imagFile, native = FALSE),silent = TRUE)\n      target<-try(paste(\"./logos/\",RegNum,\".png\",sep=\"\"), silent = TRUE)\n      try(writePNG(img,target=target), silent = TRUE)\n      \n      \n      try(addPicture(target, sheet, scale=0.2,startRow =startRow+3*i, startColumn =startColumn+9 ))\n      \n    }\n  }\n  \n  saveWorkbook(wb, paste(\"./VerificationResults/\",Country,\"_VerificationResults.xlsx\"))\n  \n  insert(outputConsole,paste(\"Joing and comparing finished!\",\"\\n\",\"Results are in \",\"./VerificationResults/\",Country,\"_VerificationResults.xlsx\"))\n  \n  galert(paste(\"Joing and comparing finished!\",\"\\n\",\" Results are in \",\"./VerificationResults/\",Country,\"_VerificationResults.xlsx\"), parent=w)\n  \n  rm(list = ls())\n}\n\njoinAndCompare<-function(verificationFile,destinationFile, Country){\n   # # \n   #   path<-\"./Inputdata/testArgentina.xlsx\"\n   #  # #  # #\n   #  # # ##destinationFile<-read_excel(path=path, skip=1)\n   #  # # # #\n   #     source<-read_excel(path=path, skip=1)\n   #  # # # #Selecting all rows with recordID\n   #   recordID<-source%>%filter(grepl(\"Record\",Trademark))%>%dplyr::rename(Record_ID=Trademark)%>%\n   #    select(Record_ID)\n   #  # # #\n   #     recordID<-recordID[rep(seq_len(nrow(recordID)), each=3),\"Record_ID\"]\n   #  # # #\n   #     source<-cbind(recordID,source)\n   #  # # #\n   #    source$Record_ID<-gsub(\"Record ID:\",\"\",source$Record_ID)\n   #  # # #\n   #     source<-source%>%filter(!grepl(\"Record\",Trademark))\n   #  # # #\n   # destinationFile<-source\n   #  # # #\n   # path<-\"./data/Argentina_online.xlsx\"\n  \n\n    #verificationFile<-as.data.frame(read_excel(path=path))\n    #names(verificationFile)<-tolower(names(verificationFile))\n  \n\n  \n    colnames<-names(destinationFile)\n    \n\n    #Add additional column with source type\n    destinationFile<-cbind(data.frame(sourceType=rep(c(\"client\",\"agent\"),nrow(destinationFile)/2)),destinationFile)\n    #names(destinationFile)<-tolower(names(destinationFile))\n\n    #destinationFile<-destinationFile[!is.na(destinationFile$`Application no.`),]\n    \n    colnames(destinationFile)<-gsub(\" \",\"__\",names(destinationFile))\n    \n    \n    verificationFile<-cbind(data.frame(sourceType=rep(\"verification\",nrow(verificationFile))),verificationFile)\n\n    \n    #i will create column names with double__. Before exporting, I will switch back\n    colnames(verificationFile)<-gsub(\" \",\"__\",names(verificationFile))\n    destinationRecordName<-unique(destinationFile[,c(\"Record_ID\",\"Trademark\",\"Application__no.\")])\n    \n    #getting record ID and Trademark\n    verificationFile<-inner_join(destinationRecordName,verificationFile, by=\"Application__no.\",copy=TRUE)\n    \n    \n    #creating same column structure in verification file\n    tempVer <- verificationFile[intersect(names(destinationFile), names(verificationFile))]\n    tempCol<-destinationFile[destinationFile$Record_ID==-99,setdiff(names(destinationFile), names(verificationFile))] #that never happens, but I get the right datatypes\n    \n    \n    \n    #same length\n    verificationFile<-cbind.fill(tempVer,tempCol, stringAsFactor=FALSE)\n    colnames(verificationFile)<-c(names(tempVer),names(tempCol))\n    \n    \n\n    #factor to columns Due to special names it doesn't work with dplyr\n     indx <- sapply(verificationFile, is.factor)\n    verificationFile[indx] <- lapply(verificationFile[indx], function(x) (as.character(x)))\n  \n    #selecting order of columns as in destination file to perform union\n    verificationFile<-verificationFile[,names(destinationFile)]\n    \n    #to be on the safe side, I convert Registration_no. to character\n    verificationFile$Registration__no.<-as.character(verificationFile$Registration__no.)\n    \n    #Performing Union\n    allData<-union_all(destinationFile,verificationFile)\n    \n    #Excluding elements, that are not in verification file\n    #Those will be managed with erros\n    allData<-allData[(allData$Application__no. %in% verificationFile$Application__no.),]\n    \n    #Sorting and adding Trademark\n    #recordID to numeric\n    allData$Record_ID<-as.integer(allData$Record_ID)\n    allData$Application__no.<-as.integer(allData$Application__no.)\n\n    allData<-allData%>%dplyr::arrange(Application__no.,sourceType)\n    \n    allData$Image<-NA\n    \n    #Rearrange columns\n    allData<-allData[,c(2,1,3:9,ncol(allData),10:(ncol(allData)-1))]\n    \n    #Adding dummy column  - if record should be evaluated in excel\n    allData$Eval<-1\n    \n    colnames(allData)<-gsub(\"__\",\" \",names(allData))\n    \n    # add all rows from source, which are not included - errors - check them according to record_id\n    destinationFile$Record_ID<-as.integer(destinationFile$Record_ID)\n    verificationFile$Record_ID<-as.integer(verificationFile$Record_ID)\n    \n    error<-anti_join(destinationFile, verificationFile, by=\"Record_ID\")\n    \n    if(\"sourceType\" %in% colnames(error))\n    {\n      error<-error%>%select(-sourceType)\n    }\n    #Eclude again this from allData\n    \n    error<-cbind(data.frame(sourceType=rep(c(\"client\",\"agent\"),nrow(error)/2)),error) \n    colnames(error)<-gsub(\"__\",\" \",names(error))\n    \n    indx <- sapply(error, is.factor)\n    error[indx] <- lapply(error[indx], function(x) (as.character(x)))\n    \n    if (nrow(error)>0) {\n      \n    diffnames<-as.list(setdiff(names(allData),names(error)))\n    \n    for (i in 1:length(diffnames))  {\n      \n           x<-diffnames[[i]]\n           if (nrow(error)==0) {\n             \n             error<-cbind(error,x)\n             \n           } else {\n           \n           errordf<-data.frame(rep(NA,nrow(error)))\n      \n           colnames(errordf)<-x\n           \n           error<-cbind(error,errordf)\n           }\n      }\n      \n    \n    error$Eval<-0\n    \n    error<-error[,names(allData)]\n    \n    error$Record_ID<-as.integer(error$Record_ID)\n    }\n    #Alldata application number to string as errors have app number with this type\n    allData$`Application no.`<-as.character(allData$`Application no.`)\n    \n\n    \n    if (nrow(error)>0) {\n    allData<-union_all(allData,error) \n    }\n    #Before creating excel, final check if there are 3 lines per app number\n    #If there are more, i delete all verification rows but one\n    rowsPerAppNum<-allData%>%select(sourceType,`Application no.`,Record_ID)%>%\n      filter(sourceType==\"verification\")%>%\n      group_by(sourceType,`Application no.`,Record_ID)%>%dplyr::mutate(Number=n())%>%\n      select(Number,Record_ID,`Application no.`)%>%filter(Number>1)\n    \n    if (nrow(rowsPerAppNum)==0)\n    {\n    #create excel\n    \n      tryCatch(createExcel(allData,Country,3,1),\n               error = function(e) {\n                 insert(outputConsole,\"creation of Excel failed! Check whether your destination file is opened!\")\n                 \n               }\n      )\n      \n      \n    \n      \n    } else {insert(outputConsole,paste('There is a problem with data.',as.character(rowsPerAppNum)))}\n    \n    rm(list = ls())\n}\n\n\n\n\n",
    "created" : 1503698627347.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2761868603",
    "id" : "80F753A9",
    "lastKnownWriteTime" : 1506415755,
    "last_content_update" : 1506415755421,
    "path" : "C:/Users/Godnov/Dropbox/Katarina/Brandstock.R",
    "project_path" : "Brandstock.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}